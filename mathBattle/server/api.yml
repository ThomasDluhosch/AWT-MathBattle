openapi: 3.0.3
info:
  title: Swagger Math Battle
  description: |-
    Math Batlle for AWT
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000/api
paths:
  /users/login:
    post:
      tags:
        - users
      summary: Login the user
      operationId: loginUser
      requestBody:
        description: Pass a users credentials to get a JWT token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'  
        '400':
          description: Wrong password
        '404':
          description: User not found
  /users/register:
    post:
      tags:
        - users
      summary: Register the user
      operationId: registerUser
      requestBody:
        description: Sign up a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'  
        '400':
          description: Username already in use
  /users/options:
    get:
      tags:
        - users
      summary: Get the user's options
      operationId: getUserOptions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options' 
        '403':
          description: 'No user set'
        '404':
          description: 'User not found'
    post:
      tags:
        - users
      summary: Update the user's options
      operationId: postUserOptions
      requestBody:
        description: Update options of the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Options'
        required: true
      responses:
        '200':
          description: Successful operation
        '401':
          description: 'Info missing'
        '403':
          description: 'No user set'
        '404':
          description: 'Specified user not found'
  /levels:
    get:
      tags:
        - levels
      summary: Get all the levels of the user
      security:
        - bearerAuth: []
      operationId: getLevelMap
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LevelArray'  
        '403':
          description: No user
  /levels/{id}:
    get:
      parameters: 
        - in: path
          name: id
          required: true
          schema: 
            type: integer
      tags:
        - levels
      summary: Get the level by id
      security:
        - bearerAuth: []
      operationId: getLevel
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Level'  
        '403':
          description: No user
  /levels/{id}/success:
    post:
      parameters: 
        - in: path
          name: id
          required: true
          schema: 
            type: integer
      tags:
        - levels
      summary: Report the Successful completion of a level
      security:
        - bearerAuth: []
      operationId: postLevelSuccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LevelSuccessInfo'  
      responses:
        '200':
          description: Successful operation
        '403':
          description: No user
        '401':
          description: Info missing
        '404':
          description: Specified level not found
  /levels/{id}/battle:
    get:
      parameters: 
        - in: path
          name: id
          required: true
          schema: 
            type: integer
        - in: query
          name: calcType
          required: false
          example: 0
          description: 0 for addition (default), 1 for subtraction, 2 for multiplication, 3 for division
          schema: 
            type: integer
            minimum: 0
            maximum: 3
      tags:
        - levels
      summary: Get everything you need for the battle of a level
      security:
        - bearerAuth: []
      operationId: getLevelBattle
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LevelBattle'  
        '403':
          description: No level id given       
        '404':
          description: Level Id not found
  /levels/{id}/highscores:
    get:
      parameters: 
        - in: path
          name: id
          required: true
          schema: 
            type: integer
      tags:
        - levels
      summary: Get the 3 highest scores of the level
      security:
        - bearerAuth: []
      operationId: getLevelHighscores
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LevelHighscores'  
        '403':
          description: No level id given       
components:
  schemas:
    LevelSuccessInfo:
      type: object
      properties:
        score: 
          type: number
          example: 110
        calcType: 
          type: number
          enum: [0,1,2,3]
          description: 0 for addition, 1 for subtraction, 2 for multiplication, 3 for division
          example: 0
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
    Options:
      type: object
      properties:
        gameMode:
          type: number
          enum: [0,1]
          example: 0
        soundVolume:
          type: number
          example: 50
        fontSize:
          type: number
          example: 16
    UserResponse:
      type: object
      properties:
        sucess:
          type: boolean
          example: true
        message:
          type: string 
          example: 'Login success'
        token:
          type: string 
          example: 'SomeToken'
    SuccessResponse:
      type: object
      properties:
        sucess:
          type: boolean
          example: true
        message:
          type: string 
          example: 'User created successfully'
    LevelArray:
      type: array
      items: 
        $ref: '#/components/schemas/Level' 
    Level:
      type: object
      properties:
        number:
          type: number
          example: 1
        completed:
          type: boolean
          example: true
        locked:
          type: boolean
          example: true
        medals:
          type: object
          nullable: true
          properties:
            addition: 
              type: boolean
              example: true
            subtraction: 
              type: boolean
              example: true
            multiplication:  
              type: boolean
              example: false
            division:  
              type: boolean
              example: false
    LevelBattle:
      type: object
      properties:
        monsterPicture:
          type: string
          example: "/public/monsters/FlyingEye.svg"
        monsterHealth:
          type: number
          example: 60
        tasks:
          type: array
          items:
            type: object
            properties:
              task: 
                type: string
                example: "4 + 3"
              solution:
                type: number
                example: 7
              highscore:
                type: number
                example: 80
    LevelHighscores:
      type: array
      items:
        type: object
        properties:
          username:
            type: string
            example: "theUser"
          score:
            type: number
            example: 60
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT 